from __future__ import annotations
import math, tempfile, os
import pandas as pd
import streamlit as st

from modules.reports import make_engineer_report
from modules.db import init_db, save_project

st.set_page_config(page_title="Mud Calculation", layout="wide")
st.title("üíß Mud Calculation ‚Äî –°–ü 341 / API RP 13D / –ò–º–ø–æ—Ä—Ç XLSX")

st.caption("–°–ü 341 ‚Äî –ø–ª–∞–Ω —Ä–∞—Å—Ç–≤–æ—Ä–∞; API RP 13D ‚Äî –≥–∏–¥—Ä–∞–≤–ª–∏–∫–∞/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç/–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è; –ò–º–ø–æ—Ä—Ç XLSX ‚Äî –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –°–ü.")

# ---------------- Helpers (API) ----------------
def geo_from_inputs(D_pipe_mm: float, k_hole: float):
    D_pipe = D_pipe_mm / 1000.0
    D_hole = k_hole * D_pipe
    Dh = D_hole - D_pipe
    A_annulus = math.pi/4 * (D_hole**2 - D_pipe**2)
    A_hole = math.pi * (D_hole**2) / 4.0
    return D_pipe, D_hole, Dh, A_annulus, A_hole

def rheology_effective_viscosity(model: str, rho: float, V: float, Dh: float,
                                 mu_cP=None, tau_y=None, mu_p_cP=None, K=None, n=None):
    if model == "–ù—å—é—Ç–æ–Ω":
        mu = (mu_cP or 1.0) * 1e-3
        Re = (rho * V * Dh) / max(mu,1e-12)
        f = 64.0 / max(Re,1e-9) if Re < 2300.0 else 0.3164 * (Re ** -0.25)
        return "Newton", f, mu
    elif model == "Bingham Plastic":
        mu_p = (mu_p_cP or 1.0) * 1e-3
        gamma = 8.0 * V / max(Dh, 1e-12)
        mu_eff = mu_p + ( (tau_y or 0.0) / max(gamma, 1e-12) )
        Re = (rho * V * Dh) / max(mu_eff,1e-12)
        f = 64.0 / max(Re,1e-9) if Re < 2300.0 else 0.3164 * (Re ** -0.25)
        return "Bingham", f, mu_eff
    else:
        K_ = (K or 0.5); n_ = (n or 0.6)
        Re_g = (rho * (V ** (2.0 - n_)) * (Dh ** n_)) / (K_ * ((3.0 * n_ + 1.0) / (4.0 * n_)))
        f = 16.0 / max(Re_g,1e-9) if Re_g < 2100.0 else 0.079 * (Re_g ** -0.25)
        gamma = 8.0 * V / max(Dh, 1e-12)
        mu_app = K_ * (max(gamma,1e-12) ** (n_ - 1.0))
        return f"PowerLaw Re_g={Re_g:.0f}", f, mu_app

def compute_all_api(Q_l_min: float, inputs: dict):
    g = 9.80665
    D_pipe_mm = inputs["D_pipe_mm"]; k_hole = inputs["k_hole"]; L_profile = inputs["L_profile"]
    rho = inputs["rho"]; model = inputs["model"]; depth_for_ecd = inputs["depth_for_ecd"]
    loc_losses_bar = inputs["loc_losses_bar"]
    alpha_h = inputs["alpha_h"]; d_cut_mm = inputs["d_cut_mm"]; rho_cut = inputs["rho_cut"]; ROP_m_h = inputs["ROP_m_h"]
    mu_cP = inputs.get("mu_cP"); tau_y = inputs.get("tau_y"); mu_p_cP = inputs.get("mu_p_cP")
    K = inputs.get("K"); n = inputs.get("n")

    D_pipe, D_hole, Dh, A_annulus, A_hole = geo_from_inputs(D_pipe_mm, k_hole)
    Q_m3_s = (Q_l_min / 1000.0) / 60.0
    V = Q_m3_s / max(A_annulus,1e-12)

    regime, f, mu_eff_for_cuttings = rheology_effective_viscosity(
        model, rho, V, Dh, mu_cP=mu_cP, tau_y=tau_y, mu_p_cP=mu_p_cP, K=K, n=n
    )
    dp_fric_Pa = f * (L_profile / max(Dh,1e-12)) * (rho * V * V / 2.0)
    dp_total_bar = dp_fric_Pa / 1e5 + loc_losses_bar

    dp_depth_Pa = (dp_total_bar * 1e5) * (depth_for_ecd / max(L_profile,1e-12))
    ecd = rho + dp_depth_Pa / g

    d_cut = d_cut_mm / 1000.0
    w_stokes = (max(rho_cut - rho,0.0) * g * d_cut * d_cut) / (18.0 * max(mu_eff_for_cuttings,1e-12))
    ang = abs(alpha_h)
    if ang <= 5.0: V_min_angle = 1.0
    elif ang <= 30.0: V_min_angle = 0.6
    else: V_min_angle = 0.3
    V_min_stokes = 1.5 * w_stokes
    V_min_required = max(V_min_angle, V_min_stokes)
    TR = V / max(V_min_required,1e-12)

    ROP_m_s = ROP_m_h / 3600.0
    A_hole = math.pi * ( (k_hole*(D_pipe_mm/1000.0))**2 ) / 4.0
    Q_cuttings_m3_s = ROP_m_s * A_hole
    A_annulus = float(A_annulus)
    Q_capacity_m3_s = V * A_annulus * 0.15

    V_total_m3 = A_annulus * L_profile

    return {
        "D_hole": D_hole, "Dh": Dh, "A_annulus": A_annulus,
        "V": V, "Q_l_min": Q_l_min, "regime": regime, "f": f,
        "dp_total_bar": dp_total_bar, "dp_fric_bar": dp_fric_Pa/1e5,
        "V_total_m3": V_total_m3, "ecd": ecd,
        "w_stokes": w_stokes, "V_min_angle": V_min_angle, "V_min_stokes": V_min_stokes,
        "V_min_required": V_min_required, "TR": TR,
        "Q_cuttings_m3_s": Q_cuttings_m3_s, "Q_capacity_m3_s": Q_capacity_m3_s
    }

def satisfies_constraints_api(res: dict, p_max_bar: float):
    return (res["TR"] >= 1.0) and (res["Q_capacity_m3_s"] >= res["Q_cuttings_m3_s"]) and (res["dp_total_bar"] <= p_max_bar)

def parse_sp341_excel(file) -> dict:
    import math as _m
    df_raw = pd.read_excel(file, sheet_name="–û—Ç—Ö–æ–¥—ã —Ä–∞—Å—Ç–≤–æ—Ä–∞ –ø–æ –°–ü 341", header=None)
    labels = {}
    for _, row in df_raw.iterrows():
        label = row[1] if len(row) > 1 else None
        v4 = row[4] if len(row) > 4 else None
        v6 = row[6] if len(row) > 6 else None
        if isinstance(label, str) and label.strip():
            val = None
            for v in (v4, v6):
                if v is not None and not (isinstance(v, float) and _m.isnan(v)):
                    val = v; break
            labels[label.strip()] = val
    return labels

# ---------------- Tabs ----------------
tab_sp, tab_api, tab_imp = st.tabs(["–°–ü 341 ‚Äî –ø–æ–¥–±–æ—Ä", "API RP 13D ‚Äî –≥–∏–¥—Ä–∞–≤–ª–∏–∫–∞", "–ò–º–ø–æ—Ä—Ç XLSX (–°–ü 341)"])

# ===== –°–ü 341
with tab_sp:
    st.subheader("üìê –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–°–ü 341)")
    c0, c1, c2 = st.columns(3)
    with c0:
        L = st.number_input("–î–ª–∏–Ω–∞ L, –º", value=float(st.session_state.get("L_sp341", 120.0)), min_value=1.0, step=1.0)
    with c1:
        k_add = st.number_input("–ù–∞–¥–±–∞–≤–∫–∞ (–¥–æ–ª—è)", value=float(st.session_state.get("k_add_sp341", 0.30)), min_value=0.0, max_value=2.0, step=0.05)
    with c2:
        soil = st.selectbox("–¢–∏–ø –≥—Ä—É–Ω—Ç–∞", ["–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∏–Ω–∞", "–ê–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∏–Ω–∞", "–ü–µ—Å–æ–∫/–≥–∞–ª–µ—á–Ω–∏–∫", "–°—É–≥–ª–∏–Ω–æ–∫"])

    presets = {
        "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∏–Ω–∞": {"C_bent_kg_m3": 25.0, "C_poly_kg_m3": 0.0},
        "–ê–∫—Ç–∏–≤–Ω–∞—è –≥–ª–∏–Ω–∞":   {"C_bent_kg_m3": 30.0, "C_poly_kg_m3": 0.5},
        "–ü–µ—Å–æ–∫/–≥–∞–ª–µ—á–Ω–∏–∫":   {"C_bent_kg_m3": 35.0, "C_poly_kg_m3": 1.0},
        "–°—É–≥–ª–∏–Ω–æ–∫":         {"C_bent_kg_m3": 30.0, "C_poly_kg_m3": 0.5},
    }
    base = presets[soil]
    c3, c4 = st.columns(2)
    with c3:
        conc_bent = st.number_input("–ö–æ–Ω—Ü. –±–µ–Ω—Ç–æ–Ω–∏—Ç–∞, –∫–≥/–º¬≥", value=float(st.session_state.get("conc_bent", base["C_bent_kg_m3"])), min_value=0.0, step=1.0)
    with c4:
        conc_poly = st.number_input("–ö–æ–Ω—Ü. –ø–æ–ª–∏–º–µ—Ä–∞, –∫–≥/–º¬≥", value=float(st.session_state.get("conc_poly", base["C_poly_kg_m3"])), min_value=0.0, step=0.1)

    st.markdown("#### –≠—Ç–∞–ø—ã (–ø–∏–ª–æ—Ç/—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)")
    default = pd.DataFrame([
        {"–≠—Ç–∞–ø": "–ü–∏–ª–æ—Ç", "–î–∏–∞–º–µ—Ç—Ä, –º–º": 200.0},
        {"–≠—Ç–∞–ø": "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ 1", "–î–∏–∞–º–µ—Ç—Ä, –º–º": 600.0},
        {"–≠—Ç–∞–ø": "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ 2", "–î–∏–∞–º–µ—Ç—Ä, –º–º": 800.0},
    ])
    df_pass = st.data_editor(st.session_state.get("sp341_df_pass", default), use_container_width=True, num_rows="dynamic")

    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ –°–ü 341", type="primary", key="sp_calc"):
        rows=[]
        V_total = M_b_total = M_p_total = 0.0
        for i, r in df_pass.iterrows():
            D_m = float(r["–î–∏–∞–º–µ—Ç—Ä, –º–º"])/1000.0
            V_hole = math.pi*(D_m**2)/4.0 * L
            V_stage = V_hole*(1.0+k_add)
            m_b = conc_bent*V_stage
            m_p = conc_poly*V_stage
            V_total += V_stage; M_b_total += m_b; M_p_total += m_p
            rows.append({"‚Ññ": i+1,"–≠—Ç–∞–ø": r.get("–≠—Ç–∞–ø", f"–≠—Ç–∞–ø {i+1}"),"D (–º–º)": r["–î–∏–∞–º–µ—Ç—Ä, –º–º"],
                         "V_—Å–∫–≤–∞–∂–∏–Ω—ã, –º¬≥": round(V_hole,2),"V_—Ä–∞—Å—á—ë—Ç, –º¬≥": round(V_stage,2),
                         "–ë–µ–Ω—Ç–æ–Ω–∏—Ç, –∫–≥": round(m_b,1),"–ü–æ–ª–∏–º–µ—Ä, –∫–≥": round(m_p,1)})
        df_out = pd.DataFrame(rows)
        st.dataframe(df_out, use_container_width=True)
        m1,m2,m3 = st.columns(3)
        m1.metric("–†–∞—Å—Ç–≤–æ—Ä, –º¬≥", f"{V_total:.1f}")
        m2.metric("–ë–µ–Ω—Ç–æ–Ω–∏—Ç, –∫–≥", f"{M_b_total:.0f}")
        m3.metric("–ü–æ–ª–∏–º–µ—Ä, –∫–≥", f"{M_p_total:.0f}")

        st.download_button("‚¨áÔ∏è CSV", df_out.to_csv(index=False).encode("utf-8"), file_name="mud_sp341.csv", mime="text/csv")

        st.subheader("üìÑ PDF –æ—Ç—á—ë—Ç (–°–ü 341)")
        t = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞", value="Mud Planning ‚Äî –°–ü 341")
        notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", value=f"–ì—Ä—É–Ω—Ç: {soil}; k_add={k_add}.")
        if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF (–°–ü 341)", key="sp_pdf"):
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
            make_engineer_report(
                filename=tmp.name, project_name="Mud_SP341", section_title=t,
                params={"L": L, "k_add": k_add, "soil": soil, "C_bent": conc_bent, "C_poly": conc_poly},
                segments=rows, stations=None, mud={"V_total_m3": V_total, "bentonite_kg": M_b_total, "polymer_kg": M_p_total},
                plot_profile_path=None, plot_plan_path=None, extra_notes=notes
            )
            with open(tmp.name, "rb") as f:
                st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF", f, file_name="Mud_SP341_Report.pdf", mime="application/pdf")
            try: os.unlink(tmp.name)
            except: pass

        init_db()
        pname = st.text_input("Project name (SP 341)", value="Mud_SP341_1")
        if st.button("üíæ Save Project (SP 341)", key="sp_save"):
            save_project(pname, "mud_sp341",
                         {"L": L, "k_add": k_add, "soil": soil, "C_bent": conc_bent, "C_poly": conc_poly},
                         segments=rows)
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

# ===== API 13D
with tab_api:
    st.subheader("–ì–µ–æ–º–µ—Ç—Ä–∏—è")
    a,b,c = st.columns(3)
    with a:
        D_pipe_mm = st.number_input("D —Ç—Ä—É–±—ã, –º–º", value=500.0, min_value=50.0, step=10.0)
        L_profile = st.number_input("–î–ª–∏–Ω–∞ L, –º", value=120.0, min_value=1.0, step=1.0)
    with b:
        k_hole = st.number_input("D_—Å–∫–≤ = k¬∑D", value=1.30, min_value=1.0, max_value=3.0, step=0.05)
        depth_for_ecd = st.number_input("–ì–ª—É–±–∏–Ω–∞ –¥–ª—è ECD, –º", value=10.0, min_value=0.0, step=1.0)
    with c:
        loc_losses_bar = st.number_input("–ú–µ—Å—Ç–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏, –±–∞—Ä", value=2.0, min_value=0.0, step=0.5)
        p_max_bar = st.number_input("–ú–∞–∫—Å. ŒîP, –±–∞—Ä", value=30.0, min_value=1.0, step=1.0)

    st.subheader("–†–µ–æ–ª–æ–≥–∏—è")
    model = st.selectbox("–ú–æ–¥–µ–ª—å", ["–ù—å—é—Ç–æ–Ω","Bingham Plastic","Power Law"])
    if model=="–ù—å—é—Ç–æ–Ω":
        rho = st.number_input("œÅ, –∫–≥/–º¬≥", value=1050.0, min_value=900.0, max_value=1800.0, step=10.0); mu_cP = st.number_input("Œº, cP", value=25.0, min_value=1.0, max_value=300.0, step=1.0)
        rheo={"mu_cP":mu_cP}
    elif model=="Bingham Plastic":
        rho = st.number_input("œÅ, –∫–≥/–º¬≥", value=1050.0, min_value=900.0, max_value=1800.0, step=10.0); tau_y = st.number_input("œÑy, –ü–∞", value=5.0, min_value=0.0, step=0.5); mu_p_cP = st.number_input("Œºp, cP", value=20.0, min_value=1.0, max_value=300.0, step=1.0)
        rheo={"tau_y":tau_y,"mu_p_cP":mu_p_cP}
    else:
        rho = st.number_input("œÅ, –∫–≥/–º¬≥", value=1050.0, min_value=900.0, max_value=1800.0, step=10.0); K = st.number_input("K, –ü–∞¬∑—Å‚Åø", value=0.5, min_value=0.01, step=0.01); n = st.number_input("n", value=0.6, min_value=0.1, max_value=1.5, step=0.05)
        rheo={"K":K,"n":n}

    st.subheader("–†–µ–∂–∏–º —Ü–∏—Ä–∫—É–ª—è—Ü–∏–∏")
    mode = st.selectbox("–ö–∞–∫ –∑–∞–¥–∞—Ç—å", ["–ü–æ —Å–∫–æ—Ä–æ—Å—Ç–∏","–ó–∞–¥–∞—Ç—å Q"])
    if mode=="–ü–æ —Å–∫–æ—Ä–æ—Å—Ç–∏":
        target_v = st.number_input("–¶–µ–ª–µ–≤–∞—è V, –º/—Å", value=1.20, min_value=0.1, max_value=5.0, step=0.1)
        Q_user=None
    else:
        Q_user = st.number_input("Q, –ª/–º–∏–Ω", value=1500.0, min_value=10.0, step=10.0); target_v=None

    st.subheader("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–æ—Ü–µ–Ω–∫–∞)")
    t1,t2,t3,t4 = st.columns(4)
    with t1: alpha_h = st.number_input("Œ±_h, ¬∞", value=0.0, min_value=-5.0, max_value=90.0, step=0.5)
    with t2: d_cut_mm = st.number_input("–†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏—Ü, –º–º", value=5.0, min_value=0.1, max_value=50.0, step=0.5)
    with t3: rho_cut = st.number_input("œÅ —á–∞—Å—Ç–∏—Ü, –∫–≥/–º¬≥", value=2650.0, min_value=1000.0, max_value=4000.0, step=50.0)
    with t4: ROP_m_h = st.number_input("ROP, –º/—á", value=10.0, min_value=0.1, step=0.5)

    calc, opt = st.columns(2)
    with calc: calc_click = st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å (API)", type="primary")
    with opt:  opt_click  = st.button("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å Q (–º–∏–Ω.)")

    if calc_click or opt_click:
        try:
            D_pipe, D_hole, Dh, A_annulus, _ = geo_from_inputs(D_pipe_mm, k_hole)
            if D_hole <= D_pipe:
                st.error("D_—Å–∫–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ D_—Ç—Ä—É–±—ã."); st.stop()

            inputs = {"D_pipe_mm":D_pipe_mm,"k_hole":k_hole,"L_profile":L_profile,
                      "rho":rho,"model":model,"depth_for_ecd":depth_for_ecd,"loc_losses_bar":loc_losses_bar,
                      "alpha_h":alpha_h,"d_cut_mm":d_cut_mm,"rho_cut":rho_cut,"ROP_m_h":ROP_m_h, **rheo}

            if calc_click:
                if mode=="–ü–æ —Å–∫–æ—Ä–æ—Å—Ç–∏":
                    Q_l_min = target_v*A_annulus*60.0*1000.0
                else:
                    Q_l_min = Q_user
                res = compute_all_api(Q_l_min, inputs)
                st.session_state.mud_params = inputs; st.session_state.mud_results = res
                st.success("–†–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ")
                g1,g2,g3,g4=st.columns(4)
                g1.metric("Q, –ª/–º–∏–Ω", f"{res['Q_l_min']:.0f}"); g2.metric("V, –º/—Å", f"{res['V']:.2f}")
                g3.metric("ŒîP, –±–∞—Ä", f"{res['dp_total_bar']:.2f}"); g4.metric("ECD, –∫–≥/–º¬≥", f"{res['ecd']:.0f}")
                st.markdown("### –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç")
                tt1,tt2,tt3,tt4=st.columns(4)
                tt1.metric("w‚Çõ, –º/—Å", f"{res['w_stokes']:.3f}")
                tt2.metric("V‚Çò·µ¢‚Çô(—É–≥–æ–ª), –º/—Å", f"{res['V_min_angle']:.2f}")
                tt3.metric("V‚Çò·µ¢‚Çô(–°—Ç–æ–∫—Å), –º/—Å", f"{res['V_min_stokes']:.2f}")
                tt4.metric("V‚Çò·µ¢‚Çô (–∏—Ç–æ–≥), –º/—Å", f"{res['V_min_required']:.2f}")
                ttt1,ttt2=st.columns(2)
                ttt1.metric("TR", f"{res['TR']:.2f}")
                ttt2.metric("Q_cut vs Q_cap (–º¬≥/—á)", f"{res['Q_cuttings_m3_s']*3600:.1f} vs {res['Q_capacity_m3_s']*3600:.1f}")
                if satisfies_constraints_api(res, p_max_bar):
                    st.success("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–æ–±–ª—é–¥–µ–Ω—ã")
                else:
                    st.warning("‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ —Å–æ–±–ª—é–¥–µ–Ω—ã")

            if opt_click:
                lo, hi = 50.0, 10000.0; best=None
                for _ in range(40):
                    mid=0.5*(lo+hi)
                    res=compute_all_api(mid, inputs)
                    if satisfies_constraints_api(res, p_max_bar): best=res; hi=mid
                    else: lo=mid
                if best:
                    st.session_state.mud_params=inputs; st.session_state.mud_results=best
                    b1,b2,b3,b4=st.columns(4)
                    b1.metric("Q* (–ª/–º–∏–Ω)", f"{best['Q_l_min']:.0f}")
                    b2.metric("V, –º/—Å", f"{best['V']:.2f}")
                    b3.metric("ŒîP, –±–∞—Ä", f"{best['dp_total_bar']:.2f}")
                    b4.metric("ECD, –∫–≥/–º¬≥", f"{best['ecd']:.0f}")
                    st.success("–ù–∞–π–¥–µ–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Q ‚úÖ")
                else:
                    st.error("–ù–µ—Ç —Ä–µ—à–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 50‚Äì10000 –ª/–º–∏–Ω")

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

    st.markdown("#### –≠–∫—Å–ø–æ—Ä—Ç / –û—Ç—á—ë—Ç / –ë–î")
    if "mud_results" in st.session_state:
        df_res = pd.DataFrame([st.session_state.mud_results])
        st.download_button("‚¨áÔ∏è CSV", df_res.to_csv(index=False).encode("utf-8"), file_name="mud_api_results.csv", mime="text/csv")

    t = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ (API)", value="Mud ‚Äî Hydraulics & Transport")
    notes = st.text_area("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", value="API RP 13D —Ä–∞—Å—á—ë—Ç + —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–æ—Ü–µ–Ω–∫–∞).")
    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF (API)"):
        if "mud_results" not in st.session_state:
            st.error("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ/–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ.")
        else:
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
            make_engineer_report(filename=tmp.name, project_name="Mud_API13D", section_title=t,
                                 params=st.session_state.mud_params, segments=None,
                                 stations=df_res if "df_res" in locals() else None,
                                 mud=st.session_state.mud_results,
                                 plot_profile_path=None, plot_plan_path=None, extra_notes=notes)
            with open(tmp.name, "rb") as f:
                st.download_button("‚¨áÔ∏è PDF", f, file_name="Mud_API_Report.pdf", mime="application/pdf")
            try: os.unlink(tmp.name)
            except: pass

    init_db()
    pname = st.text_input("Project name (API)", value="Mud_API_1")
    if st.button("üíæ Save Project (API)"):
        if "mud_params" in st.session_state and "mud_results" in st.session_state:
            save_project(pname, "mud_api", st.session_state.mud_params, segments=st.session_state.mud_results)
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        else:
            st.error("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á—ë—Ç/–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.")

# ===== –ò–º–ø–æ—Ä—Ç XLSX (–°–ü 341)
with tab_imp:
    st.subheader("–ò–º–ø–æ—Ä—Ç Excel (–ª–∏—Å—Ç ¬´–û—Ç—Ö–æ–¥—ã —Ä–∞—Å—Ç–≤–æ—Ä–∞ –ø–æ –°–ü 341¬ª)")
    uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ XLS/XLSX", type=["xls","xlsx"])
    if uploaded:
        try:
            labels = parse_sp341_excel(uploaded)
            # –ü–æ–¥—Ö–≤–∞—Ç–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∏ –∑–∞–ø–∏—à–µ–º –≤ session_state, —á—Ç–æ–±—ã –°–ü-–≤–∫–ª–∞–¥–∫–∞ –∏—Ö —É–≤–∏–¥–µ–ª–∞
            L_from = labels.get("–î–ª–∏–Ω–∞, –º")
            k_from = labels.get("–∫–æ—ç—Ñ—Ñ —É—á–µ—Ç–∞ –ø–æ—Ç–µ—Ä—å —Ä–∞—Å—Ç–≤–æ—Ä–∞ –Ω–∞ —Ç–µ—Ö–Ω. –æ–ø–µ—Ä–∞—Ü–∏–∏")
            if L_from is not None: st.session_state["L_sp341"] = float(L_from)
            if k_from is not None:
                k_val = float(k_from)
                st.session_state["k_add_sp341"] = (k_val-1.0) if k_val>1.0 else k_val

            # –î–∏–∞–º–µ—Ç—Ä—ã (–≤ –º–º)
            diam_list=[]
            for k in ["–î–∏–∞–º–µ—Ç—Ä –ø–∏–ª–æ—Ç–∞, –º","–î–∏–∞–º–µ—Ç—Ä 1 —Ä–∞—Å—à, –º","–î–∏–∞–º–µ—Ç—Ä 2 —Ä–∞—Å—à, –º","–î–∏–∞–º–µ—Ç—Ä 3 —Ä–∞—Å—à.,–º","–î–∏–∞–º–µ—Ç—Ä 4 —Ä–∞—Å—à.,–º"]:
                if k in labels and labels[k]: diam_list.append(float(labels[k])*1000.0)
            if diam_list:
                df_pass = pd.DataFrame([{"–≠—Ç–∞–ø":"–ü–∏–ª–æ—Ç","–î–∏–∞–º–µ—Ç—Ä, –º–º":diam_list[0]}] +
                                       [{"–≠—Ç–∞–ø":f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ {i}","–î–∏–∞–º–µ—Ç—Ä, –º–º":d} for i,d in enumerate(diam_list[1:], start=1)])
                st.session_state["sp341_df_pass"] = df_pass

            c_b = labels.get("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä. –ë–µ–Ω—Ç–æ–Ω–∏—Ç–∞ –∫–≥/–º3")
            c_p = labels.get("–∫–æ–Ω—Ü–µ–Ω—Ç—Ä. –ø–æ–ª–∏–º–µ—Ä—ã –∫–≥/–º3")
            if c_b: st.session_state["conc_bent"] = float(c_b)
            if c_p: st.session_state["conc_poly"] = float(c_p)

            st.success("–ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É ¬´–°–ü 341 ‚Äî –ø–æ–¥–±–æ—Ä¬ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª.")
            show=[]
            for kk in ["–î–∏–∞–º–µ—Ç—Ä —Å–∫–≤–∞–∂–∏–Ω—ã, –º","–î–ª–∏–Ω–∞, –º","–î–∏–∞–º–µ—Ç—Ä –ø–∏–ª–æ—Ç–∞, –º","–î–∏–∞–º–µ—Ç—Ä 1 —Ä–∞—Å—à, –º","–î–∏–∞–º–µ—Ç—Ä 2 —Ä–∞—Å—à, –º",
                       "–∫–æ—ç—Ñ—Ñ —É—á–µ—Ç–∞ –ø–æ—Ç–µ—Ä—å —Ä–∞—Å—Ç–≤–æ—Ä–∞ –Ω–∞ —Ç–µ—Ö–Ω. –æ–ø–µ—Ä–∞—Ü–∏–∏",
                       "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä. –ë–µ–Ω—Ç–æ–Ω–∏—Ç–∞ –∫–≥/–º3","–∫–æ–Ω—Ü–µ–Ω—Ç—Ä. –ø–æ–ª–∏–º–µ—Ä—ã –∫–≥/–º3"]:
                if kk in labels: show.append({"–ü–∞—Ä–∞–º–µ—Ç—Ä": kk, "–ó–Ω–∞—á–µ–Ω–∏–µ": labels[kk]})
            if show:
                st.dataframe(pd.DataFrame(show), use_container_width=True)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

with st.expander("üìö –ú–µ—Ç–æ–¥–∏–∫–∞ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"):
    st.markdown("""
**–°–ü 341.1325800.2017** ‚Äî –ø–ª–∞–Ω–æ–≤—ã–π –ø–æ–¥–±–æ—Ä —Ä–∞—Å—Ç–≤–æ—Ä–∞ (–æ–±—ä—ë–º—ã/–Ω–∞–¥–±–∞–≤–∫–∏/–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏).  
**API RP 13D** ‚Äî —Ä–µ–æ–ª–æ–≥–∏—è/–≥–∏–¥—Ä–∞–≤–ª–∏–∫–∞ (ŒîP/ECD) + –æ—Ü–µ–Ω–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —à–ª–∞–º–∞ (TR, V_min, Q_cut vs Q_cap).  
–î–ª—è –ì–ù–ë –±–æ–ª—å—à–∏—Ö –¥–∏–∞–º–µ—Ç—Ä–æ–≤ API-—á–∞—Å—Ç—å ‚Äî –∏–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞; –æ—Ç–¥–µ–ª—å–Ω–∞—è HDD-–≥–∏–¥—Ä–∞–≤–ª–∏–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.
""")
